{"version":3,"file":"707.js","mappings":"0QAeOA,eAAeC,EAAQC,EAAUC,EAAgB,MACtD,MAAMC,EAAO,IAAKC,YACbD,SAEC,SAAO,QAAW,EAAAE,GAAI,QAASF,EAAKG,IAAK,SAAU,CACvDC,KAAMN,EACNO,SAAS,EACTC,WAAW,UACXC,eAAe,aACXR,GAAiB,CAAES,SAAUT,IAErC,CAIOH,eAAea,IACpB,MAAMT,EAAO,IAAKC,YAClB,IAAKD,EAAM,OAEX,MAAMU,GAAW,QAAW,EAAAR,GAAI,QAASF,EAAKG,IAAK,SAC7CQ,GAAI,OAAMD,GAAU,QAAQ,YAAa,QAG/C,aAFuB,QAAQC,IAEfC,KAAKC,IAAKC,IAAQ,CAChCC,GAAID,EAAIC,MACLD,EAAIE,SAEX,CAIOpB,eAAeqB,EAAWC,GAC/B,MAAMlB,EAAO,IAAKC,YACbD,SAEC,SAAU,QAAI,EAAAE,GAAI,QAASF,EAAKG,IAAK,QAASe,GACtD,CAGOtB,eAAeuB,EAAWD,EAAQF,GACvC,MAAMhB,EAAO,IAAKC,YACbD,SACC,SAAU,QAAI,EAAAE,GAAI,QAASF,EAAKG,IAAK,QAASe,GAASF,EAC/D,CAIOpB,eAAewB,IACpB,MAAMpB,EAAO,IAAKC,YAClB,IAAKD,EAAM,OACX,MAAMqB,GAAW,QAAW,EAAAnB,GAAI,QAASF,EAAKG,IAAK,SAC7CmB,QAAiB,QAAQD,GACzBE,EAAiB,GACvBD,EAASE,QAASC,IAChBF,EAAeG,MACb,SAAU,QAAI,EAAAxB,GAAI,QAASF,EAAKG,IAAK,QAASsB,EAAQV,cAGpDY,QAAQC,IAAIL,EACpB,CAGO3B,eAAeiC,EAAcC,GAClC,UACQ,QAAuB,IAAMA,GACnCC,MAAM,+CACR,CAAE,MAAOC,GACPD,MAAM,UAAYC,EAAMC,QAC1B,CACF,C","sources":["webpack://filestructure_template/./src/js/db.js"],"sourcesContent":["import { db, auth } from \"./firebase.js\";\r\nimport {\r\n  collection,\r\n  addDoc,\r\n  getDocs,\r\n  deleteDoc,\r\n  doc,\r\n  updateDoc,\r\n  serverTimestamp,\r\n  query,\r\n  orderBy,\r\n} from \"firebase/firestore\";\r\nimport { sendPasswordResetEmail } from \"firebase/auth\";\r\n\r\n//save a new task for current user\r\nexport async function addTask(tasktext, deadlineValue = null) {\r\n  const user = auth.currentUser;\r\n  if (!user) return;\r\n\r\n  await addDoc(collection(db, \"users\", user.uid, \"tasks\"), {\r\n    text: tasktext,\r\n    checked: false,\r\n    timestamp: serverTimestamp(),\r\n    sortTimestamp: serverTimestamp(),\r\n    ...(deadlineValue && { deadline: deadlineValue }), // ✅ save as 'deadline'\r\n  });\r\n}\r\n\r\n//load tasks from firestore db\r\n\r\nexport async function loadTask() {\r\n  const user = auth.currentUser;\r\n  if (!user) return;\r\n\r\n  const tasksRef = collection(db, \"users\", user.uid, \"tasks\");\r\n  const q = query(tasksRef, orderBy(\"timestamp\", \"asc\")); // ✅ sort oldest first\r\n  const snapshot = await getDocs(q);\r\n\r\n  return snapshot.docs.map((doc) => ({\r\n    id: doc.id,\r\n    ...doc.data(),\r\n  }));\r\n}\r\n\r\n//delete tasks from firstore db\r\n\r\nexport async function deleteTask(taskID) {\r\n  const user = auth.currentUser;\r\n  if (!user) return;\r\n\r\n  await deleteDoc(doc(db, \"users\", user.uid, \"tasks\", taskID));\r\n}\r\n\r\n//update task\r\nexport async function updateTask(taskID, data) {\r\n  const user = auth.currentUser;\r\n  if (!user) return;\r\n  await updateDoc(doc(db, \"users\", user.uid, \"tasks\", taskID), data);\r\n}\r\n\r\n//Clear all tasks\r\n\r\nexport async function clearTasks() {\r\n  const user = auth.currentUser;\r\n  if (!user) return;\r\n  const tasksCol = collection(db, \"users\", user.uid, \"tasks\");\r\n  const snapshot = await getDocs(tasksCol);\r\n  const deletePromises = [];\r\n  snapshot.forEach((taskDoc) => {\r\n    deletePromises.push(\r\n      deleteDoc(doc(db, \"users\", user.uid, \"tasks\", taskDoc.id))\r\n    );\r\n  });\r\n  await Promise.all(deletePromises);\r\n}\r\n\r\n//reset password\r\nexport async function resetPassword(email) {\r\n  try {\r\n    await sendPasswordResetEmail(auth, email);\r\n    alert(\"Password reset email sent. Check your inbox.\");\r\n  } catch (error) {\r\n    alert(\"Error: \" + error.message);\r\n  }\r\n}\r\n"],"names":["async","addTask","tasktext","deadlineValue","user","currentUser","db","uid","text","checked","timestamp","sortTimestamp","deadline","loadTask","tasksRef","q","docs","map","doc","id","data","deleteTask","taskID","updateTask","clearTasks","tasksCol","snapshot","deletePromises","forEach","taskDoc","push","Promise","all","resetPassword","email","alert","error","message"],"sourceRoot":""}