{"mappings":"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","sources":["<anon>","src/js/script.js"],"sourcesContent":["const addButton = document.querySelector(\".addTask__button\");\nconst taskInput = document.querySelector(\".addTask__input\");\nconst taskList = document.querySelector(\".taskList\");\nconst clearAllButton = document.querySelector(\".clearAll__button\");\nconst statusCounter = document.querySelector(\".status__counter\");\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    loadTasks();\n    counterTasks();\n});\n// function to add tasks\nfunction addTask() {\n    const taskText = taskInput.value.trim();\n    if (taskText === \"\") {\n        alert(\"Please enter a task.\");\n        return;\n    }\n    const newTask = document.createElement(\"div\");\n    newTask.classList.add(\"tasklist__task\");\n    newTask.innerHTML = `\n  <div class=\"tasklist__all\">\n  <input type=\"checkbox\" name=\"task\" class=\"tasklist__checkbox\" />\n    <p>${taskText}</p>\n    <span class=\"tasklist__edit\"><i class=\"ri-edit-2-line\"></i></span></div>\n         <div class=\"delete\">     <span class=\"tasklist__delete\"> <i class=\"ri-delete-bin-6-line\"></i></span></div>\n\n    `;\n    taskList.appendChild(newTask);\n    saveTaskToLocalStorage(taskText);\n    taskInput.value = \"\";\n    counterTasks();\n// return newTask;\n}\n// Eventlistener to add task to the tasklist\naddButton.addEventListener(\"click\", addTask);\ntaskInput.addEventListener(\"keypress\", (event)=>{\n    if (event.key === \"Enter\" && taskInput.value.trim() !== \"\") addTask();\n    else if (event.key === \"Enter\" && taskInput.value.trim() === \"\") alert(\"Please enter a task.\");\n});\n//event listener to edit task\ntaskList.addEventListener(\"click\", (event)=>{\n    if (event.target.closest(\".tasklist__edit\")) {\n        const task = event.target.closest(\".tasklist__task\");\n        const taskText = task.querySelector(\"p\").textContent;\n        //create input field to edit task\n        const editInputField = document.createElement(\"input\");\n        editInputField.type = \"text\";\n        editInputField.value = taskText;\n        editInputField.classList.add(\"edit__input\");\n        // replace p with inputfield\n        const paragraph = task.querySelector(\"p\");\n        let tasks = JSON.parse(localStorage.getItem(\"tasks\") || []);\n        const taskIndex = tasks.findIndex((task)=>task.text === paragraph.textContent);\n        paragraph.replaceWith(editInputField);\n        editInputField.focus();\n        // save edited task when user press enter\n        editInputField.addEventListener(\"keypress\", (event)=>{\n            if (event.key === \"Enter\" && editInputField.value.trim() !== \"\") {\n                const newTaskText = editInputField.value.trim();\n                paragraph.textContent = newTaskText;\n                editInputField.replaceWith(paragraph);\n                if (taskIndex !== -1) {\n                    tasks[taskIndex].text = paragraph.textContent;\n                    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n                }\n            } else if (event.key === \"Enter\" && editInputField.value.trim() == \"\") editInputField.replaceWith(paragraph);\n        });\n    }\n});\n//delete function to remove task from localstorage\nfunction deleteTask(taskText) {\n    let tasks = JSON.parse(localStorage.getItem(\"tasks\")) || [];\n    const taskIndex = tasks.findIndex((task)=>task.text === taskText);\n    if (taskIndex !== -1) tasks.splice(taskIndex, 1);\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    counterTasks();\n}\n//event listener to delete Tasks from tasklist\ntaskList.addEventListener(\"click\", (event)=>{\n    if (event.target.closest(\".tasklist__delete\")) {\n        const task = event.target.closest(\".tasklist__task\");\n        const taskText = task.querySelector(\"p\").textContent;\n        deleteTask(taskText);\n        task.remove();\n        counterTasks();\n    }\n});\n// save tasks to localstorage\nfunction saveTaskToLocalStorage(taskText) {\n    let tasks = JSON.parse(localStorage.getItem(\"tasks\")) || [];\n    tasks.push({\n        text: taskText,\n        checked: false\n    });\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n}\n// update checked status\nfunction updateCheckedStatus(taskText, isChecked) {\n    let tasks = JSON.parse(localStorage.getItem(\"tasks\")) || [];\n    const taskIndex = tasks.findIndex((task)=>task.text === taskText);\n    if (taskIndex !== -1) tasks[taskIndex].checked = isChecked;\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n}\n//tasklist eventlistener for change of checkbox\ntaskList.addEventListener(\"change\", (event)=>{\n    if (event.target.classList.contains(\"tasklist__checkbox\")) {\n        const task = event.target.closest(\".tasklist__task\");\n        const taskText = task.querySelector(\"p\").textContent;\n        updateCheckedStatus(taskText, event.target.checked);\n        counterTasks();\n    }\n});\n// function to load tasks from localstorage\nfunction loadTasks() {\n    let tasks = JSON.parse(localStorage.getItem(\"tasks\")) || [];\n    tasks.forEach((task)=>{\n        const newTask = document.createElement(\"div\");\n        newTask.classList.add(\"tasklist__task\");\n        newTask.innerHTML = `\n  <div class=\"tasklist__all\">\n  <input type=\"checkbox\" name=\"task\" class=\"tasklist__checkbox\" ${task.checked ? \"checked\" : \"\"} />\n    <p>${task.text}</p>\n    <span class=\"tasklist__edit\"><i class=\"ri-edit-2-line\"></i></span></div>\n         <div class=\"delete\">     <span class=\"tasklist__delete\"> <i class=\"ri-delete-bin-6-line\"></i></span></div>\n\n    `;\n        taskList.appendChild(newTask);\n    });\n}\n// clear all tasks function\nfunction clearAllTasks() {\n    localStorage.removeItem(\"tasks\");\n    taskList.innerHTML = \"\";\n    counterTasks();\n}\nclearAllButton.addEventListener(\"click\", ()=>{\n    clearAllTasks();\n    counterTasks();\n});\n// function to count tasks\nfunction counterTasks() {\n    let tasks = JSON.parse(localStorage.getItem(\"tasks\")) || [];\n    const counter = tasks.length;\n    const checkCounter = document.querySelectorAll(\".tasklist__checkbox\");\n    checkCounter.forEach((checkbox)=>{\n        checkbox.addEventListener(\"click\", counterTasks);\n    });\n    const checkedTasks = Array.from(checkCounter).filter((checkbox)=>checkbox.checked).length;\n    statusCounter.innerText = `${checkedTasks}/${counter}`;\n} // save data on actual server\n // script with gulp and test with cypress chai&mocha\n //e2e test with cypress\n // test suite with mocha and chai\n\n//# sourceMappingURL=toDoList.e858b81c.js.map\n","const addButton = document.querySelector(\".addTask__button\");\r\nconst taskInput = document.querySelector(\".addTask__input\");\r\nconst taskList = document.querySelector(\".taskList\");\r\nconst clearAllButton = document.querySelector(\".clearAll__button\");\r\nconst statusCounter = document.querySelector(\".status__counter\");\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  loadTasks();\r\n  counterTasks();\r\n});\r\n\r\n// function to add tasks\r\nfunction addTask() {\r\n  const taskText = taskInput.value.trim();\r\n  if (taskText === \"\") {\r\n    alert(\"Please enter a task.\");\r\n    return;\r\n  }\r\n  const newTask = document.createElement(\"div\");\r\n  newTask.classList.add(\"tasklist__task\");\r\n  newTask.innerHTML = `\r\n  <div class=\"tasklist__all\">\r\n  <input type=\"checkbox\" name=\"task\" class=\"tasklist__checkbox\" />\r\n    <p>${taskText}</p>\r\n    <span class=\"tasklist__edit\"><i class=\"ri-edit-2-line\"></i></span></div>\r\n         <div class=\"delete\">     <span class=\"tasklist__delete\"> <i class=\"ri-delete-bin-6-line\"></i></span></div>\r\n\r\n    `;\r\n  taskList.appendChild(newTask);\r\n  saveTaskToLocalStorage(taskText);\r\n  taskInput.value = \"\";\r\n  counterTasks();\r\n  // return newTask;\r\n}\r\n\r\n// Eventlistener to add task to the tasklist\r\naddButton.addEventListener(\"click\", addTask);\r\ntaskInput.addEventListener(\"keypress\", (event) => {\r\n  if (event.key === \"Enter\" && taskInput.value.trim() !== \"\") {\r\n    addTask();\r\n  } else if (event.key === \"Enter\" && taskInput.value.trim() === \"\") {\r\n    alert(\"Please enter a task.\");\r\n  }\r\n});\r\n\r\n//event listener to edit task\r\ntaskList.addEventListener(\"click\", (event) => {\r\n  if (event.target.closest(\".tasklist__edit\")) {\r\n    const task = event.target.closest(\".tasklist__task\");\r\n    const taskText = task.querySelector(\"p\").textContent;\r\n\r\n    //create input field to edit task\r\n    const editInputField = document.createElement(\"input\");\r\n    editInputField.type = \"text\";\r\n    editInputField.value = taskText;\r\n    editInputField.classList.add(\"edit__input\");\r\n\r\n    // replace p with inputfield\r\n    const paragraph = task.querySelector(\"p\");\r\n    let tasks = JSON.parse(localStorage.getItem(\"tasks\") || []);\r\n    const taskIndex = tasks.findIndex(\r\n      (task) => task.text === paragraph.textContent\r\n    );\r\n    paragraph.replaceWith(editInputField);\r\n    editInputField.focus();\r\n    // save edited task when user press enter\r\n    editInputField.addEventListener(\"keypress\", (event) => {\r\n      if (event.key === \"Enter\" && editInputField.value.trim() !== \"\") {\r\n        const newTaskText = editInputField.value.trim();\r\n        paragraph.textContent = newTaskText;\r\n\r\n        editInputField.replaceWith(paragraph);\r\n\r\n        if (taskIndex !== -1) {\r\n          tasks[taskIndex].text = paragraph.textContent;\r\n          localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n        }\r\n      } else if (event.key === \"Enter\" && editInputField.value.trim() == \"\") {\r\n        editInputField.replaceWith(paragraph);\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\n//delete function to remove task from localstorage\r\nfunction deleteTask(taskText) {\r\n  let tasks = JSON.parse(localStorage.getItem(\"tasks\")) || [];\r\n  const taskIndex = tasks.findIndex((task) => task.text === taskText);\r\n\r\n  if (taskIndex !== -1) {\r\n    tasks.splice(taskIndex, 1);\r\n  }\r\n  localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  counterTasks();\r\n}\r\n\r\n//event listener to delete Tasks from tasklist\r\ntaskList.addEventListener(\"click\", (event) => {\r\n  if (event.target.closest(\".tasklist__delete\")) {\r\n    const task = event.target.closest(\".tasklist__task\");\r\n    const taskText = task.querySelector(\"p\").textContent;\r\n    deleteTask(taskText);\r\n    task.remove();\r\n    counterTasks();\r\n  }\r\n});\r\n\r\n// save tasks to localstorage\r\nfunction saveTaskToLocalStorage(taskText) {\r\n  let tasks = JSON.parse(localStorage.getItem(\"tasks\")) || [];\r\n  tasks.push({ text: taskText, checked: false });\r\n  localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n}\r\n\r\n// update checked status\r\nfunction updateCheckedStatus(taskText, isChecked) {\r\n  let tasks = JSON.parse(localStorage.getItem(\"tasks\")) || [];\r\n  const taskIndex = tasks.findIndex((task) => task.text === taskText);\r\n  if (taskIndex !== -1) {\r\n    tasks[taskIndex].checked = isChecked;\r\n  }\r\n  localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n}\r\n\r\n//tasklist eventlistener for change of checkbox\r\ntaskList.addEventListener(\"change\", (event) => {\r\n  if (event.target.classList.contains(\"tasklist__checkbox\")) {\r\n    const task = event.target.closest(\".tasklist__task\");\r\n    const taskText = task.querySelector(\"p\").textContent;\r\n    updateCheckedStatus(taskText, event.target.checked);\r\n    counterTasks();\r\n  }\r\n});\r\n\r\n// function to load tasks from localstorage\r\nfunction loadTasks() {\r\n  let tasks = JSON.parse(localStorage.getItem(\"tasks\")) || [];\r\n  tasks.forEach((task) => {\r\n    const newTask = document.createElement(\"div\");\r\n    newTask.classList.add(\"tasklist__task\");\r\n    newTask.innerHTML = `\r\n  <div class=\"tasklist__all\">\r\n  <input type=\"checkbox\" name=\"task\" class=\"tasklist__checkbox\" ${task.checked ? \"checked\" : \"\"} />\r\n    <p>${task.text}</p>\r\n    <span class=\"tasklist__edit\"><i class=\"ri-edit-2-line\"></i></span></div>\r\n         <div class=\"delete\">     <span class=\"tasklist__delete\"> <i class=\"ri-delete-bin-6-line\"></i></span></div>\r\n\r\n    `;\r\n    taskList.appendChild(newTask);\r\n  });\r\n}\r\n// clear all tasks function\r\nfunction clearAllTasks() {\r\n  localStorage.removeItem(\"tasks\");\r\n  taskList.innerHTML = \"\";\r\n  counterTasks();\r\n}\r\n\r\nclearAllButton.addEventListener(\"click\", () => {\r\n  clearAllTasks();\r\n  counterTasks();\r\n});\r\n\r\n// function to count tasks\r\nfunction counterTasks() {\r\n  let tasks = JSON.parse(localStorage.getItem(\"tasks\")) || [];\r\n  const counter = tasks.length;\r\n  const checkCounter = document.querySelectorAll(\".tasklist__checkbox\");\r\n  checkCounter.forEach((checkbox) => {\r\n    checkbox.addEventListener(\"click\", counterTasks);\r\n  });\r\n\r\n  const checkedTasks = Array.from(checkCounter).filter(\r\n    (checkbox) => checkbox.checked\r\n  ).length;\r\n  statusCounter.innerText = `${checkedTasks}/${counter}`;\r\n}\r\n\r\n// save data on actual server\r\n\r\n// script with gulp and test with cypress chai&mocha\r\n//e2e test with cypress\r\n// test suite with mocha and chai\r\n"],"names":["addButton","document","querySelector","taskInput","taskList","clearAllButton","statusCounter","addTask","taskText","value","trim","alert","newTask","createElement","classList","add","innerHTML","appendChild","saveTaskToLocalStorage","counterTasks","deleteTask","tasks","JSON","parse","localStorage","getItem","taskIndex","findIndex","task","text","splice","setItem","stringify","push","checked","updateCheckedStatus","isChecked","loadTasks","forEach","clearAllTasks","removeItem","counter","length","checkCounter","querySelectorAll","checkbox","addEventListener","checkedTasks","Array","from","filter","innerText","event","key","target","closest","textContent","editInputField","type","paragraph","replaceWith","focus","remove","contains"],"version":3,"file":"toDoList.e858b81c.js.map"}